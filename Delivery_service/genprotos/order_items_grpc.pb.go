// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: order_items.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderItemsServiceClient is the client API for OrderItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemsServiceClient interface {
	CreateOrderItems(ctx context.Context, in *CreateOrderItemsRequest, opts ...grpc.CallOption) (*CreateOrderItemsResponse, error)
	UpdateOrderItems(ctx context.Context, in *UpdateOrderItemsRequest, opts ...grpc.CallOption) (*UpdateOrderItemsResponse, error)
	GetByIdOrderItems(ctx context.Context, in *GetByIdOrderItemsRequest, opts ...grpc.CallOption) (*GetByIdOrderItemsResponse, error)
	GetAllOrderItems(ctx context.Context, in *GetAllOrderItemsRequest, opts ...grpc.CallOption) (*GetAllOrderItemsResponse, error)
	DeleteOrderItems(ctx context.Context, in *DeleteOrderItemsRequest, opts ...grpc.CallOption) (*DeleteOrderItemsResponse, error)
}

type orderItemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemsServiceClient(cc grpc.ClientConnInterface) OrderItemsServiceClient {
	return &orderItemsServiceClient{cc}
}

func (c *orderItemsServiceClient) CreateOrderItems(ctx context.Context, in *CreateOrderItemsRequest, opts ...grpc.CallOption) (*CreateOrderItemsResponse, error) {
	out := new(CreateOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/order_items.OrderItemsService/CreateOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemsServiceClient) UpdateOrderItems(ctx context.Context, in *UpdateOrderItemsRequest, opts ...grpc.CallOption) (*UpdateOrderItemsResponse, error) {
	out := new(UpdateOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/order_items.OrderItemsService/UpdateOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemsServiceClient) GetByIdOrderItems(ctx context.Context, in *GetByIdOrderItemsRequest, opts ...grpc.CallOption) (*GetByIdOrderItemsResponse, error) {
	out := new(GetByIdOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/order_items.OrderItemsService/GetByIdOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemsServiceClient) GetAllOrderItems(ctx context.Context, in *GetAllOrderItemsRequest, opts ...grpc.CallOption) (*GetAllOrderItemsResponse, error) {
	out := new(GetAllOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/order_items.OrderItemsService/GetAllOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemsServiceClient) DeleteOrderItems(ctx context.Context, in *DeleteOrderItemsRequest, opts ...grpc.CallOption) (*DeleteOrderItemsResponse, error) {
	out := new(DeleteOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/order_items.OrderItemsService/DeleteOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemsServiceServer is the server API for OrderItemsService service.
// All implementations must embed UnimplementedOrderItemsServiceServer
// for forward compatibility
type OrderItemsServiceServer interface {
	CreateOrderItems(context.Context, *CreateOrderItemsRequest) (*CreateOrderItemsResponse, error)
	UpdateOrderItems(context.Context, *UpdateOrderItemsRequest) (*UpdateOrderItemsResponse, error)
	GetByIdOrderItems(context.Context, *GetByIdOrderItemsRequest) (*GetByIdOrderItemsResponse, error)
	GetAllOrderItems(context.Context, *GetAllOrderItemsRequest) (*GetAllOrderItemsResponse, error)
	DeleteOrderItems(context.Context, *DeleteOrderItemsRequest) (*DeleteOrderItemsResponse, error)
	mustEmbedUnimplementedOrderItemsServiceServer()
}

// UnimplementedOrderItemsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemsServiceServer struct {
}

func (UnimplementedOrderItemsServiceServer) CreateOrderItems(context.Context, *CreateOrderItemsRequest) (*CreateOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderItems not implemented")
}
func (UnimplementedOrderItemsServiceServer) UpdateOrderItems(context.Context, *UpdateOrderItemsRequest) (*UpdateOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderItems not implemented")
}
func (UnimplementedOrderItemsServiceServer) GetByIdOrderItems(context.Context, *GetByIdOrderItemsRequest) (*GetByIdOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdOrderItems not implemented")
}
func (UnimplementedOrderItemsServiceServer) GetAllOrderItems(context.Context, *GetAllOrderItemsRequest) (*GetAllOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrderItems not implemented")
}
func (UnimplementedOrderItemsServiceServer) DeleteOrderItems(context.Context, *DeleteOrderItemsRequest) (*DeleteOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderItems not implemented")
}
func (UnimplementedOrderItemsServiceServer) mustEmbedUnimplementedOrderItemsServiceServer() {}

// UnsafeOrderItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemsServiceServer will
// result in compilation errors.
type UnsafeOrderItemsServiceServer interface {
	mustEmbedUnimplementedOrderItemsServiceServer()
}

func RegisterOrderItemsServiceServer(s grpc.ServiceRegistrar, srv OrderItemsServiceServer) {
	s.RegisterService(&OrderItemsService_ServiceDesc, srv)
}

func _OrderItemsService_CreateOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemsServiceServer).CreateOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_items.OrderItemsService/CreateOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemsServiceServer).CreateOrderItems(ctx, req.(*CreateOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemsService_UpdateOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemsServiceServer).UpdateOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_items.OrderItemsService/UpdateOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemsServiceServer).UpdateOrderItems(ctx, req.(*UpdateOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemsService_GetByIdOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemsServiceServer).GetByIdOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_items.OrderItemsService/GetByIdOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemsServiceServer).GetByIdOrderItems(ctx, req.(*GetByIdOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemsService_GetAllOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemsServiceServer).GetAllOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_items.OrderItemsService/GetAllOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemsServiceServer).GetAllOrderItems(ctx, req.(*GetAllOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemsService_DeleteOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemsServiceServer).DeleteOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_items.OrderItemsService/DeleteOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemsServiceServer).DeleteOrderItems(ctx, req.(*DeleteOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemsService_ServiceDesc is the grpc.ServiceDesc for OrderItemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_items.OrderItemsService",
	HandlerType: (*OrderItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderItems",
			Handler:    _OrderItemsService_CreateOrderItems_Handler,
		},
		{
			MethodName: "UpdateOrderItems",
			Handler:    _OrderItemsService_UpdateOrderItems_Handler,
		},
		{
			MethodName: "GetByIdOrderItems",
			Handler:    _OrderItemsService_GetByIdOrderItems_Handler,
		},
		{
			MethodName: "GetAllOrderItems",
			Handler:    _OrderItemsService_GetAllOrderItems_Handler,
		},
		{
			MethodName: "DeleteOrderItems",
			Handler:    _OrderItemsService_DeleteOrderItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_items.proto",
}
